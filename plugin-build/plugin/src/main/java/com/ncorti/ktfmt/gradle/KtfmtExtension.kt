package com.ncorti.ktfmt.gradle

import org.gradle.api.provider.Property

/** Gradle Extension to help you configure ktfmt-gradle */
@Suppress("UnnecessaryAbstractClass")
public abstract class KtfmtExtension {
    init {
        maxWidth.convention(DEFAULT_MAX_WIDTH)
        blockIndent.convention(DEFAULT_BLOCK_INDENT)
        continuationIndent.convention(DEFAULT_CONTINUATION_INDENT)
        removeUnusedImports.convention(DEFAULT_REMOVE_UNUSED_IMPORTS)
        debuggingPrintOpsAfterFormatting.convention(DEFAULT_DEBUGGING_PRINT_OPTS)
        trailingCommaManagementStrategy.convention(DEFAULT_TRAILING_COMMAS_STRATEGY)
        srcSetPathExclusionPattern.convention(DEFAULT_SRC_SET_PATH_EXCLUSION_PATTERN)
        useClassloaderIsolation.convention(DEFAULT_USE_CLASSLOADER_ISOLATION)
    }

    /** ktfmt breaks lines longer than maxWidth. Default 100. */
    public abstract val maxWidth: Property<Int>

    /**
     * blockIndent is the size of the indent used when a new block is opened, in spaces.
     *
     * For example,
     * ```
     * fun f() {
     *   //
     * }
     * ```
     */
    public abstract val blockIndent: Property<Int>

    /**
     * continuationIndent is the size of the indent used when a line is broken because it's too
     * long, in spaces.
     *
     * For example,
     * ```
     * val foo = bar(
     *     1)
     * ```
     */
    public abstract val continuationIndent: Property<Int>

    /**
     * Strategy for managing trailing commas.
     *
     * See [TrailingCommaManagementStrategy] for more details.
     */
    public abstract val trailingCommaManagementStrategy: Property<TrailingCommaManagementStrategy>

    /** Whether ktfmt should remove imports that are not used. */
    public abstract val removeUnusedImports: Property<Boolean>

    /**
     * Regex to define what sourceSets paths should not be formatted
     *
     * For example the sourceSet "main" in the "build" folder would be excluded with the regex
     * "^(.*[\\/])?build([\\/].*)?$". This does not affect files inside a sourceSet. To exclude a
     * file inside a sourceSet use the include & exclude options on the ktfmt task.
     */
    public abstract val srcSetPathExclusionPattern: Property<Regex>

    /**
     * Print the Ops generated by KotlinInputAstVisitor to help reason about formatting (i.e.,
     * newline) decisions
     */
    public abstract val debuggingPrintOpsAfterFormatting: Property<Boolean>

    /**
     * Whether the Gradle Worker should use ClassLoader isolation (true) or Process isolation
     * (false - default).
     */
    public abstract val useClassloaderIsolation: Property<Boolean>

    @Deprecated(
        "This was updated to trailingCommaManagementStrategy and will be removed in a future release.",
        ReplaceWith("trailingCommaManagementStrategy"),
    )
    public var manageTrailingCommas: Boolean
        set(value) {
            trailingCommaManagementStrategy.set(
                if (value) TrailingCommaManagementStrategy.COMPLETE
                else TrailingCommaManagementStrategy.NONE
            )
        }
        get() = trailingCommaManagementStrategy.get() != TrailingCommaManagementStrategy.NONE

    /** Sets the Google style (equivalent to set blockIndent to 2 and continuationIndent to 2). */
    @Suppress("MagicNumber")
    public fun googleStyle() {
        blockIndent.set(2)
        continuationIndent.set(2)
        trailingCommaManagementStrategy.set(TrailingCommaManagementStrategy.COMPLETE)
    }

    /**
     * Sets the KotlinLang style. A format that attempts to reflect
     * https://kotlinlang.org/docs/coding-conventions.html.
     */
    @Suppress("MagicNumber")
    public fun kotlinLangStyle() {
        blockIndent.set(4)
        continuationIndent.set(4)
        trailingCommaManagementStrategy.set(TrailingCommaManagementStrategy.COMPLETE)
    }

    internal fun toFormattingOptions(): FormattingOptionsBean =
        FormattingOptionsBean(
            maxWidth = maxWidth.get(),
            blockIndent = blockIndent.get(),
            continuationIndent = continuationIndent.get(),
            trailingCommaManagementStrategy = trailingCommaManagementStrategy.get(),
            removeUnusedImports = removeUnusedImports.get(),
            debuggingPrintOpsAfterFormatting = debuggingPrintOpsAfterFormatting.get(),
        )

    internal companion object {
        internal const val DEFAULT_MAX_WIDTH: Int = 100
        internal const val DEFAULT_BLOCK_INDENT: Int = 2
        internal const val DEFAULT_CONTINUATION_INDENT: Int = 4
        internal const val DEFAULT_REMOVE_UNUSED_IMPORTS: Boolean = true
        internal const val DEFAULT_DEBUGGING_PRINT_OPTS: Boolean = false
        internal val DEFAULT_TRAILING_COMMAS_STRATEGY: TrailingCommaManagementStrategy =
            TrailingCommaManagementStrategy.NONE
        internal const val DEFAULT_USE_CLASSLOADER_ISOLATION: Boolean = false
        internal val DEFAULT_SRC_SET_PATH_EXCLUSION_PATTERN =
            Regex("^(.*[\\\\/])?build([\\\\/].*)?\$")
    }
}
